%{
#include <stdio.h>
#include <string.h>
#include "y.tab.h"
int line = 0;
%}

%option noyywrap
%option caseless

IDENTIFIER              ([a-zA-Z][a-zA-Z0-9]{0,255})
INTEGER_CONSTANT        ([+-]?[1-9][0-9]*)|0
CHARACTER_CONSTANT      \'[a-zA-Z0-9]\'
STRING_CONSTANT         \"[-a-zA-Z0-9_:;!?.+/%*&#<> ^]*\"
BOOLEAN_CONSTANT        true|false
HEAD                    \<head\>
CLOSED_HEAD             \<\/head\>
BODY                    \<body\>
CLOSED_BODY              \<\/body\>
%%

{HEAD}                          {printf("Reserved word %s\n", yytext); return HEAD;}
{BODY}                          {printf("Reserved word %s\n", yytext); return BODY;}
int                             {printf("Reserved word %s\n", yytext); return INT;}
String                          {printf("Reserved word %s\n", yytext); return STRING;}
float                           {printf("Reserved word %s\n", yytext); return FLOAT;}
bool                            {printf("Reserved word %s\n", yytext); return BOOL;}
if                              {printf("Reserved word %s\n", yytext); return IF;}
while                           {printf("Reserved word %s\n", yytext); return WHILE;}
input                           {printf("Reserved word %s\n", yytext); return INPUT;}
log                             {printf("Reserved word %s\n", yytext); return LOG;}
for                             {printf("Reserved word %s\n", yytext); return FOR;}
then                            {printf("Reserved word %s\n", yytext); return THEN;}
else                            {printf("Reserved word %s\n", yytext); return ELSE;}
{CLOSED_HEAD}                         {printf("Reserved word %s\n", yytext); return CLOSE_HEAD;}
{CLOSED_BODY}                         {printf("Reserved word %s\n", yytext); return CLOSE_BODY;}
and                             {printf("Reserved word: %s\n", yytext); return AND;}
or                              {printf("Reserved word: %s\n", yytext); return OR;}
not                             {printf( "Operator: %s\n", yytext ); return NOT;}
times                             {printf( "Operator: %s\n", yytext ); return MUL;}
div                             {printf( "Operator: %s\n", yytext ); return DIV;}
lessThan                             {printf( "Operator: %s\n", yytext ); return LT;}
greaterThan                             {printf( "Operator: %s\n", yytext ); return GT;}
lessOrEqualThan                            {printf( "Operator: %s\n", yytext ); return LE;}
greaterOrEqualThan                            {printf( "Operator: %s\n", yytext ); return GE;}
notEqual                            {printf( "Operator: %s\n", yytext ); return NE;}
equal                            {printf( "Operator: %s\n", yytext ); return EQ;}
plus                             {printf( "Operator: %s\n", yytext ); return PLUS;}
minus                             {printf( "Operator: %s\n", yytext ); return MINUS;}
return                             {printf( "Operator: %s\n", yytext ); return RETURN;}
":"                             {printf( "Separator: %s\n", yytext ); return COLON;}
";"                             {printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
","                             {printf( "Separator: %s\n", yytext ); return COMMA;}
"."                             {printf( "Separator: %s\n", yytext ); return DOT;}
"{"                             {printf( "Separator: %s\n", yytext ); return OPEN_CURLY_BRACKET;}
"}"                             {printf( "Separator: %s\n", yytext ); return CLOSED_CURLY_BRACKET;}
"("                             {printf( "Separator: %s\n", yytext ); return OPEN_ROUND_BRACKET;}
")"                             {printf( "Separator: %s\n", yytext ); return CLOSED_ROUND_BRACKET;}
"["                             {printf( "Separator: %s\n", yytext ); return OPEN_RIGHT_BRACKET;}
"]"                             {printf( "Separator: %s\n", yytext ); return CLOSED_RIGHT_BRACKET;}
"="                            {printf( "Operator: %s\n", yytext ); return ATRIB;}
{INTEGER_CONSTANT}              {printf("Integer const: %s\n",yytext);return CONST;}
{CHARACTER_CONSTANT}            {printf("Char const: %s\n",yytext);return CONST;}
{BOOLEAN_CONSTANT}              {printf("Bool const: %s\n",yytext);return CONST;}
{STRING_CONSTANT}               {printf("String const: %s\n",yytext);return CONST;}
{IDENTIFIER}                    {printf("Identifier: %s\n",yytext); return IDENTIFIER;}

[ \t]                           /* eat up whitespace */
[\n]                            {line++;}
[+-]?0[0-9]* {printf("Illegal constant at line %d\n", line); return -1;}

\'[a-zA-Z0-9]{2,}\' {printf("Character of length >=2 at line %d\n", line); return -1;}
.                               {printf("Error at line %d\n", line);}
%%
